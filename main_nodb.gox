package main

import (
	"fmt"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/joho/godotenv"
)

// struct
type Todo struct {
	ID        int    `json:"id"`
	Completed bool   `json:"completed"`
	Body      string `json:"body"`
}

func main() {
	env_err := godotenv.Load(".env")
	if env_err != nil {
		log.Fatal("Error loading .env file")

	}
	PORT := os.Getenv("PORT")
	fmt.Println("Hello, World!!")
	app := fiber.New()

	todos := []Todo{} //todos empty array with struct object

	app.Get("/", func(c *fiber.Ctx) error {
		return c.Status(200).JSON(fiber.Map{"msg": "Hello, Todos!!"})
	})

	app.Get("/api/todos", func(c *fiber.Ctx) error {
		return c.Status(200).JSON(fiber.Map{"todos": todos})
	})

	app.Post("/api/todos", func(c *fiber.Ctx) error {
		todo := &Todo{} // new(Todo) create new instance/ [{id:0, completed: false, body: ""}]
		fmt.Println(todo)
		if err := c.BodyParser(todo); err != nil {
			return err
		}
		fmt.Println(*todo)

		if todo.Body == "" {
			return c.Status(400).JSON(fiber.Map{"error": "Body is required"})
		}
		todo.ID = len(todos) + 1 // todo.ID equavalent dgn (*todo).ID short form
		todos = append(todos, *todo)
		// return c.Status(201).JSON(fiber.Map{"todos": todos, "todo": todo})
		return c.Status(201).JSON(todos)
	})
	//patch or put
	app.Patch("/api/todos/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")
		for i, todo := range todos {
			if fmt.Sprint(todo.ID) == id {
				todos[i].Completed = true
				return c.Status(200).JSON(todos[i])

			}
		}
		return c.Status(404).JSON(fiber.Map{"error": "Todo not found"})
	})
	//delete

	app.Delete("/api/todos/:id", func(c *fiber.Ctx) error {
		id := c.Params("id")
		for index, todo := range todos {
			if fmt.Sprint(todo.ID) == id {
				//delete :index maksud dari index 0 ke target index, index:, dari target ke end
				todos = append(todos[:index], todos[index+1:]...)
				return c.Status(200).JSON(fiber.Map{"todos": todos})
			}
		}
		return c.Status(404).JSON(fiber.Map{"error": "Todo not found"})
	})

	log.Fatal(app.Listen(":" + PORT))
}
